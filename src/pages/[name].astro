---
import type { GetStaticPaths } from "astro";
import Layout from "../layouts/Layout.astro"
import { getLanguage } from "../services/pokemon";
import { getPokemon } from '../services/pokemon';
import { getPokemonSpecie } from "../services/pokemon";
import { getPokemonList } from "../services/pokemon";

const { name } = Astro.params;

let detail;
let specie;
let language = await getLanguage({id: 9});

if(name){
    detail = await getPokemon({name});
    // Obtener el id del pokemon por la url, ya que hay algunos pokemon que toma repetidos por ejemplo los ultra, max, alola, etc.
    let id = detail?.species?.url.split("/").splice(-2,1).pop(); 
    specie = await getPokemonSpecie({id});
} 

export async function getStaticPaths() {
    // LLamada a la lista completa de pokemon
    const pokemonList = await getPokemonList();

    return pokemonList.map((item) => (
        {params: {name: item.name}}
    ));
}

const imageUrl = `/img/landscape/${detail?.types[0]?.type?.name}.webp`;
const pokemonName = detail?.name.replaceAll("-", " ");
const checkType = detail?.types[0]?.type?.name.match(/dark|fairy|fighting|ghost|ice|poison|psychic|steel|water|fire|electric|dragon/)
const nameEvolve = specie?.evolves_from_species?.name;
let genusText = "???";
let pokemonText = "???";
let evolve;
let textColor = "text-black";
if(nameEvolve) evolve = await getPokemon({name: nameEvolve}); 

// Texto donde va el peso y altura.
specie?.genera?.map((item) =>(
    item?.language?.name == language?.name ? genusText = item?.genus : genusText
));

// Texto de la descripción del pokémon.
specie?.flavor_text_entries?.map((item) =>(
    item?.language?.name == language?.name ? pokemonText = item?.flavor_text : pokemonText
));

if (checkType != null) textColor = "text-white"

// Stats
const attack = detail?.stats[1]?.base_stat; 
const SPAttack = detail?.stats[3]?.base_stat; 
const defense = detail?.stats[2]?.base_stat; 
const SPDefense = detail?.stats[4]?.base_stat; 
const speed = detail?.stats[5]?.base_stat; 
const hp = detail?.stats[0]?.base_stat; 
console.log(name);
---

<Layout title="pokemon">
    <main class="m-auto flex items-center justify-center h-screen">
        <div class="bg-[#FFD700] p-4 w-[40rem] sm:max-w-sm md:max-w-sm lg:max-w-sm xl:max-w-sm shadow-[4px_4px_540px_40px] shadow-amber-100 rounded-lg">
            <div class="rounded-lg relative" style={`background-image: url('${imageUrl}');  background-size: cover;`}>
                <div class="rounded-lg">
                    <div class="flex justify-between items-center px-1">
                        <div class="flex-none w-14"></div>
                        <h2 class=`font-bold uppercase text-lg ${textColor} flex-1`>{pokemonName}</h2>
                        <div class="flex-none">
                            <p class="text-red-500 font-medium text-2xl  text-end [text-shadow:_.1px_.7px_0px_#000]" >{hp}<span></span> HP</p> 
                        </div>
                    </div>
                    {   evolve != null ?
                            <div class="mx-auto w-12 h-12 absolute border-2 border-white shadow-inner rounded-tl-3xl rounded-br-3xl rounded-bl-2xl rounded-tr-2xl top-1 left-1 bg-[#BEBEBE]">
                                <a href={`/${evolve?.name}`}>
                                    <img class="object-cover object-center skew-y-6 w-full" src={evolve?.sprites?.other["official-artwork"]?.front_default} alt={evolve?.name} title={evolve?.name}>
                                </a>
                            </div>
                        : ""
                    }

                    <div class="mx-auto h-52 w-[19rem] relative-mt-18 border-8 shadow-[4px_4px_10px_1px] border-yellow-300 overflow-hidden flex items-center justify-center">
                        <img class="object-cover object-center w-32" src={detail.sprites.other.showdown.front_default != null ? 
                    detail?.sprites?.other?.showdown?.front_default : detail.sprites.other["official-artwork"].front_default} alt={detail?.name}>
                    </div>
                    <div class="bg-[#FFD700] w-[18rem] mx-auto mt-1 shadow-[10px_10px_50px_.2px_#FFD700] rounded-sm text-[11px] px-1 flex italic justify-center font-medium justify-evenly">
                        <p>{genusText}</p>
                        <p>height: <span>{detail?.height/10}</span> mts.</p>
                        <p>weight: <span>{detail?.weight/10}</span> kg.</p>
                    </div>
                    <br>
                    <p class=`w-[18rem] mx-auto text-justify ${textColor} font-medium leading-5`>{pokemonText}</p>
                    
                    <hr class="h-px my-3 bg-gray-200 border-0 dark:bg-gray-700">

                    <div class="grid grid-cols-5 gap-1 items-center  mb-1">
                        <div></div>
                        <h3 class=`font-bold uppercase text-lg ${textColor} text-center col-start-3` id="modalStat">Stats</h3>
                        <svg class=`w-[20px] h-[20px] cursor-pointer text-right ${textColor}` data-popover-target="popover-default" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="20" height="20" fill="none" viewBox="0 0 24 24">
                            <path stroke="currentColor" stroke-width="2" d="M21 12c0 1.2-4.03 6-9 6s-9-4.8-9-6c0-1.2 4.03-6 9-6s9 4.8 9 6Z"/>
                            <path stroke="currentColor" stroke-width="2" d="M15 12a3 3 0 1 1-6 0 3 3 0 0 1 6 0Z"/>
                        </svg>
                    </div>
                      
                    <div class=`px-1 mx-auto flex justify-around  text-center`>
                        <div>
                            <p class="rounded-full bg-[#ffdf00]">Attack <span>{attack}</span></p>
                            <p class="rounded-full bg-[#ffdf00] px-2 mt-1">SP Attack <span>{SPAttack}</span></p>
                        </div>
                        <div>
                            <p class="rounded-full bg-[#ffdf00]">Defense <span>{defense}</span></p>
                            <p class="rounded-full bg-[#ffdf00] px-2 mt-1">SP Defense <span>{SPDefense}</span></p>
                        </div>
                        <div>
                            <p class="rounded-full bg-[#ffdf00] px-2">Speed <span>{speed}</span></p>
                        </div>
                    </div>
                    <hr class="h-px my-3 bg-gray-200 border-0 dark:bg-gray-700">

                    <!-- popover -->
                    <div data-popover id="popover-default" role="tooltip" class="absolute z-10 invisible inline-block w-80 text-sm text-gray-500 transition-opacity duration-300 bg-white border border-gray-200 rounded-lg shadow-sm opacity-0 dark:text-gray-400 dark:border-gray-600 dark:bg-gray-800">
                        <div class="px-3 py-2 bg-gray-100 border-b border-gray-200 rounded-t-lg dark:border-gray-600 dark:bg-gray-700">
                            <h3 class="font-semibold text-gray-900 dark:text-white">{pokemonName} stats</h3>
                        </div>
                        <div class="px-3 py-2">
                            <canvas id="stats" width="200" height="200"></canvas> 
                        </div>
                        <div data-popper-arrow></div>
                    </div>

                    <div class="flex flex-row-reverse">
                        {
                            detail?.types.map((item) =>(
                                <img class="me-0.5" src=`/img/icons/${item.type.name}.webp` alt={item.type.name} title={item.type.name} width="25px" height="25px"> 
                            ))
                        }
                    </div>
                </div>
            </div>
        </div>
    </main>
</Layout>

<style>
    html{
        background-color: white;
        background: url("img/stadium.jpg") no-repeat center center fixed;
        background-size: cover;
    }
</style>

<script define:vars={{ attack, SPAttack, defense, SPDefense, speed }}>
    document.addEventListener("DOMContentLoaded", () => {
    var ctx = document.getElementById('stats').getContext('2d');
    const getAttack = {attack};
    const getSPAttack = {SPAttack};
    const getDefense = {defense};
    const getSPDefense= {SPDefense};
    const getSpeed= {speed};
    var myChart = new Chart(ctx, {
            type: 'radar', 
            data: {
                labels: [
                    'Attack',
                    'Defense',
                    'Special Attack',
                    'Special Defense',
                    'Speed',
                ],
                datasets: [{
                    data: [getAttack.attack, getDefense.defense, getSPAttack.SPAttack, getSPDefense.SPDefense, getSpeed.speed],
                    fill: true,
                    backgroundColor: '#ff573329',
                    borderColor: '#ff5733',
                    pointBackgroundColor: '#ff0000',
                    pointBorderColor: '#ff0000',
                    pointHoverBackgroundColor: '#fff',
                    pointHoverBorderColor: '#ff0000'
                }]
            },
            options: {
                responsive: true,
                elements: {
                    line: {
                        borderWidth: 3
                    }
                },
                plugins: {
                    legend: {
                        display: false
                    }
                },
                pointLabels :{
                    fontColor: '#333',
                    fontFamily: "'Raleway', 'Helvetica Neue', 'Helvetica', 'Arial', sans-serif",
                    fontSize: 12,
                    fontWeight: 600,
                },
            }
        });
});
</script>